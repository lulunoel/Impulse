#include "stdafx.h"
#include "settingsMenu.h"
#include "../mainMenu.h"
#include "settings/languageMenu.h"
#include "settings/themeMenu.h"
#include "menu/submenus/main/miscMenu.h"

using namespace SettingsMenuVars;

namespace SettingsMenuVars {
	Vars vars;

	ScrollStruct<float> measurementTypes[] = {
		TranslationString("Imperial", true), 2.236936f,
		TranslationString("Metric", true), 3.6f
	};

	ScrollStruct<int> hideTypes[] = {
	TranslationString("Always", true), 0,
	TranslationString("When menu is open", true), 1,
	TranslationString("Never", true), 2
	};
}

void SettingsMenu::Init() {
	setParentSubmenu<MainMenu>();
	setName("Settings", true, true);

	addOption(SubmenuOption("Language")
		.addSubmenu<LanguageMenu>().addTranslation()
		.addTooltip("Language options"));

	addOption(SubmenuOption("Menu theme")
		.addSubmenu<ThemeMenu>().addTranslation()
		.addTooltip("Theme options"));

	addOption(BreakOption());

	addOption(KeyOption("Open key [open/close trainer]").addTranslation()
		.addKey(GetMenu()->m_openKey)
		.addTooltip("Open/close key for the trainer"));

	addOption(KeyOption("Controller open key one [open/close trainer]")
		.addKeyWithControllerSupport(vars.openkeynew, vars.controllerKey1)
		.canBeSaved().addHotkey().addTranslation()
		.addTooltip("Set the first open button for controller [must use both one and two]"));

	addOption(KeyOption("Controller open key two [open/close trainer]")
		.addKeyWithControllerSupport(vars.openkeynew2, vars.controllerKey2)
		.canBeSaved().addHotkey().addTranslation()
		.addTooltip("Set the second open button for controller [must use both one and two]"));

	addOption(KeyOption("Mouse toggle key [move trainer/panels]").addTranslation()
		.addKey(GetMenu()->m_mouseKey)
		.addTooltip("Mouse toggle key, used to move the trainer and panels"));

	addOption(NumberOption<int>(SCROLL, "Max display options on the trainer")
		.addNumber(GetMenu()->m_maxOptions, "%i", 1).addMin(8).addMax(21)
		.addHotkey().canBeSaved()
		.addTooltip("This will change the max options that display on the trainer pages - 14 is default"));

	addOption(ScrollOption<int>(SCROLL, "Show screen panel buttons")
		.addScroll(vars.hideType, 0, NUMOF(hideTypes) - 1, hideTypes)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("Show screen panel buttons"));

	addOption(ToggleOption("Allow gameplay while using mouse")
		.addToggle(MiscMenuVars::vars.Allowmousemovements)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("This will allow gameplay to be used while using mouse"));

	addOption(ToggleOption("Keep last position on trainer open")
		.addToggle(vars.keeplastpos)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("This will allow the trainer to open at the last location you closed at"));

	addOption(ToggleOption("Speed up smooth scroll")
		.addToggle(vars.speedupsmoothscrolling)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("This will speed up the smooth scrolling generated by the trainer"));

	/*addOption(NumberOption<int>(SCROLL, "Edit smooth scroll speed")
		.addNumber(GetRenderer()->m_scrollspeed, "%i", 1).addMin(5).addMax(100)
		.addHotkey().canBeSaved()
		.addTooltip("This will increase the smooth scrolling generated by the trainer"));*/

	addOption(ToggleOption("Disable smooth scroll")
		.addToggle(vars.disablesmoothscroll)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("This will disable smooth scrolling"));

	addOption(ToggleOption("Disable controller input")
		.addToggle(vars.disablecontrollerinput)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("This will disable any controller input for the trainer"));

	addOption(ButtonOption("Close all windows")
		.addFunction([] {GetWindowManager()->CloseAllWindows(); })
		.addHotkey().addTranslation()
		.addTooltip("Close all UI windows"));

	/*addOption(NumberOption<float>(SCROLL, "Opacity")
		.addNumber(GetMenu()->m_opacity, "%.3f", 0.50f).addMin(0.50f).addMax(1.00f)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("Change the font size"));*/

	addOption(BreakOption("Hide Options"));

	addOption(ToggleOption("Hide tooltip box")
		.addToggle(vars.hideuitooltips)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("Hide this tooltip box"));

	addOption(ToggleOption("Hide toggle cursor tooltip")
		.addToggle(vars.hideuicursortooltip)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("Hide \"Toggle cursor on/off\""));

	addOption(ToggleOption("Hide ips from player infobox")
		.addToggle(vars.hideplayerips)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("Hide player ips on the session tab"));

	addOption(ToggleOption("Hide r* ids from player infobox")
		.addToggle(vars.hideplayerrids)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("Hide player r* ids on the session tab"));

	addOption(ToggleOption("Hide map from player list")
		.addToggle(vars.hidemap)
		.addHotkey().addTranslation().canBeSaved()
		.addTooltip("Hide map from player list on the session tab"));

	addOption(BreakOption("Onscreen Elements"));

	addOption(ScrollOption<float>(SCROLL, "Measurement type")
		.addScroll(vars.measurementType, 0, NUMOF(measurementTypes) - 1, measurementTypes)
		.canBeSaved().addTranslation()
		.addTooltip("Change between measurement types (such as MPH and KPH)"));

	addOption(ToggleOption("Add outline to onscreen elements")
		.addToggle(MiscMenuVars::vars.Outlineonscreenelements)
		.addTranslation().addHotkey().canBeSaved()
		.addTooltip("This will add an outline to some onscreen elements from the trainer (etc. FPS)"));

	addOption(ColorOption("Edit color of onscreen elements")
		.addColor(MiscMenuVars::vars.Colorscreenelements)
		.canBeSaved().addTranslation()
		.addTooltip("This will edit the color to some onscreen elements from the trainer (etc. FPS)").addTranslation());

	addOption(ToggleOption("Remove outline from breaks / scrolling options")
		.addToggle(vars.unoutlinestoof)
		.addTranslation().canBeSaved().addHotkey()
		.addTooltip("This will remove the black outlines from breaks and scrolling sliders"));
}

/*Update once when submenu is opened*/
void SettingsMenu::UpdateOnce() {}

/*Update while submenu is active*/
void SettingsMenu::Update() {}

/*Background update*/
void SettingsMenu::FeatureUpdate() {}

/*Singleton*/
SettingsMenu* _instance;
SettingsMenu* SettingsMenu::GetInstance() {
	if (_instance == nullptr) {
		_instance = new SettingsMenu();
		_instance->Init();
		GetSubmenuHandler()->addSubmenu(_instance);
	}
	return _instance;
}
SettingsMenu::~SettingsMenu() { delete _instance; }