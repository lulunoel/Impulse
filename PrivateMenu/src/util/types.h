#pragma once

#define MAXPLAYERS 31

typedef DWORD Void;
typedef DWORD Any;
typedef DWORD uint;
typedef DWORD Hash;
typedef int Entity;
typedef int Player;
typedef int FireId;
typedef int Ped;
typedef int Vehicle;
typedef int Cam;
typedef int CarGenerator;
typedef int Group;
typedef int Train;
typedef int Pickup;
typedef int Object;
typedef int Weapon;
typedef int Interior;
typedef int Blip;
//typedef int Texture;
typedef int TextureDict;
typedef int CoverPoint;
typedef int Camera;
typedef int TaskSequence;
typedef int ColourIndex;
typedef int Sphere;
typedef int ScrHandle;

typedef const char* String;

#pragma pack(push, 1)

typedef struct {
	float m_elements[16];
}Matrix;

typedef struct {
	float x, y, z, w;
} Vector4;

typedef struct Vector3 {
	float x;
	DWORD _paddingx;
	float y;
	DWORD _paddingy;
	float z;
	DWORD _paddingz;


	Vector3() {
		x = 0;
		y = 0;
		z = 0;
		_paddingx = 0;
		_paddingy = 0;
		_paddingz = 0;
	}

	Vector3(float _x, float _y, float _z) : x(_x), y(_y), z(_z) {}

	Vector3(float x, DWORD xp, float y, DWORD yp, float z, DWORD zp) {
		this->x = x;
		this->y = y;
		this->z = z;
		this->_paddingx = xp;
		this->_paddingy = yp;
		this->_paddingz = zp;
	}


	Vector3 Multiply(float x) {
		Vector3 result;
		result.x = this->x;
		result.y = this->y;
		result.z = this->z;

		result.x *= x;
		result.y *= x;
		result.z *= x;

		return result;
	}

	Vector3 Negative() {
		return Vector3(-x, -y, -z);
	}

	Vector3 Add(float what, bool usez = false) {
		if (usez) {
			return Vector3(x + what, y + what, z);
		} else {
			return Vector3(x + what, y + what, z + what);
		}
	}

	float Distance(Vector3 in) {
		float a = (float)(in.x - x);
		float b = (float)(in.y - y);
		float c = (float)(in.z - z);
		return (float)sqrt((a * a) + (b * b) + (c * c));
	}

	float Length() {
		return sqrt(x * x + y * y + z * z);
	}

	Vector3 operator*(float num) {
		return Vector3(x * num, y * num, z * num);
	}

	Vector3 operator*=(float num) {
		return Vector3(x * num, y * num, z * num);
	}

	Vector3 operator/(float f) {
		return Vector3(x / f, y / f, z / f);
	}

	Vector3 operator/=(float f) {
		return Vector3(x / f, y / f, z / f);
	}

	friend Vector3 operator*(float num, Vector3 &vec) {
		return Vector3(vec.x * num, vec.y * num, vec.z * num);
	}

	Vector3 operator+(const Vector3 &vec) {
		return Vector3(x + vec.x, y + vec.y, z + vec.z);
	}
	Vector3 operator-(const Vector3 &vec) {
		return Vector3(x - vec.x, y - vec.y, z - vec.z);
	}

	bool operator== (const Vector3 &vec) {
		return (vec.x == x && vec.y == y && vec.z == z);
	}

	bool operator!= (const Vector3 &vec) {
		return (vec.x != x && vec.y != y && vec.z != z);
	}
} Vector3;

typedef struct Vector2 {
	float x;
	float y;

	Vector2() {}

	Vector2(float _x, float _y)
		: x(_x), y(_y) {}
} Vector2;
#pragma pack(pop)

typedef struct {
	float x;
	float y;
	float z;
} Vector3_t;

typedef struct {
	String dict;
	String id;
} texture;

struct ModuleDetection {
	uint64_t m_base;
	uint64_t m_size;
	HMODULE m_module;
	char m_szName[100];

	ModuleDetection(){}

	ModuleDetection(uint64_t a, uint64_t b, const char* c, HMODULE hm)
		: m_base(a), m_size(b), m_module(hm) {
		strcpy(m_szName, c);
	}

	static friend bool operator==(const ModuleDetection& left, HMODULE module) {
		return left.m_module == module;
	}
};

class Color {
public:

	union {
		struct { int m_r, m_g, m_b, m_a; };
		struct { int R, G, B, A; };
	};

	Color(){ }

	void clamp() {
		if (m_r < 0) m_r = 0;
		if (m_g < 0) m_g = 0;
		if (m_b < 0) m_b = 0;
		if (m_a < 0) m_a = 0;

		if (m_r > 255) m_r = 255;
		if (m_g > 255) m_g = 255;
		if (m_b > 255) m_b = 255;
		if (m_a > 255) m_a = 255;
	}

	Color(int r, int g, int b, int a = 255)
		: m_r(r), m_g(g), m_b(b), m_a(a)
	{}

	int getCombined() { return m_r + m_g + m_b; }

	Color getOffset(int offset) {
		Color col = { m_r + offset, m_g + offset, m_b + offset, m_a };
		col.clamp();
		return col;
	}

	json getAsJson() {
		json jsonOb = {
			m_r, m_g, m_b, m_a
		};
		return jsonOb;
	}

	vector<int> getAsVector() {
		return { m_r, m_g, m_b, m_a };
	}
};

typedef struct RGBA {
	int r;
	int g;
	int b;
	int a;

	RGBA() {
		r = 0;
		g = 0;
		b = 0;
		a = 0;
	}

	RGBA(int r1, int g1, int b1, int a1) {
		r = r1;
		g = g1;
		b = b1;
		a = a1;
	}
};

typedef enum {
	SCROLL, //Scroll through the numbers/strings and execute the addFunction function every time the user scrolls. Pressing the option opens up the custom input window
	SELECT, //Scroll through the numbers/strings and execute the addFunction function when the option is pressed. The output number is then set to the current number
	TOGGLE, //Add a toggle to enable/disable the feature. Acts the same as the SCROLL type.
	SCROLLSELECT //Same as scroll, just without custom input, and the addFunction function is called on press
}ScrollOptionType;

typedef struct {
	string m_name;
	bool m_important;
	int m_offset;
	string m_pattern;

	inline void clear() {
		m_name.clear();
		m_important = false;
		m_offset = 0;
		m_pattern.clear();
	}
}PStruct;

typedef struct {
	String dict;
	String id;

	bool isEmpty() { return strcmp(dict, "") + strcmp(id, "") == 0; }
} Texture;

/*Authorisation role*/
typedef enum {
	Null = 15,
	Staff = 648224,
	User = 3412634,
	Tester = 3008,
	Vip = 1337,
	Dev = -4333,
} Role;

typedef enum
{
	// justify: 0 - center, 1 - left, 2 - right (-1 = ignore)
	JustifyIgnore = -1,
	JustifyCenter,
	JustifyLeft,
	JustifyRight
} Justify;

typedef enum {
	FontChaletLondon = 0,
	FontHouseScript = 1,
	FontMonoSpace = 2,
	FontWindlings = 3,
	FontChaletComprimeCologne = 4,
	FontChaletComprimeCologne2 = 5,
	FontChaletComprimeCologne3 = 6,
	FontPricedown = 7
} Font;

typedef enum {
	ThreadStateIdle = 0x0,
	ThreadStateRunning = 0x1,
	ThreadStateKilled = 0x2,
	ThreadState3 = 0x3,
	ThreadState4 = 0x4,
} threadState;

typedef enum {
	GameStatePlaying,
	GameStateIntro,
	GameStateLicense = 3,
	GameStateMainMenu = 5,
	GameStateLoadingSP_MP = 6
} GameState;


typedef enum {
	VEHICLE_SEAT_NONE = -3,
	VEHICLE_SEAT_ANY = -2,
	VEHICLE_SEAT_DRIVER = -1,
	VEHICLE_SEAT_PASSENGER = 0,
	VEHICLE_SEAT_LEFT_FRONT = -1,
	VEHICLE_SEAT_RIGHT_FRONT = 0,
	VEHICLE_SEAT_LEFT_REAR = 1,
	VEHICLE_SEAT_RIGHT_REAR = 2,
} vehicleSeat;

typedef enum {
	VEHICLE_WINDOW_TINT_NONE,
	VEHICLE_WINDOW_TINT_PURE_BLACK,
	VEHICLE_WINDOW_TINT_DARK_SMOKE,
	VEHICLE_WINDOW_TINT_LIGHT_SMOKE,
	VEHICLE_WINDOW_TINT_STOCK,
	VEHICLE_WINDOW_TINT_LIMO,
	VEHICLE_WINDOW_TINT_GREEN
} windowTint;


enum VehicleModTypes {
	MOD_SPOILER,
	MOD_FRONTBUMPER,
	MOD_REARBUMPER,
	MOD_SIDESKIRT,
	MOD_EXHAUST,
	MOD_CHASSIS, //Or roll cage
	MOD_GRILLE,
	MOD_HOOD,
	MOD_FENDER,
	MOD_RIGHTFENDER,
	MOD_ROOF,
	MOD_ENGINE,
	MOD_BRAKES,
	MOD_TRANSMISSION,
	MOD_HORNS,
	MOD_SUSPENSION,
	MOD_ARMOR,
	MOD_UNK17 = 17,
	MOD_TURBO = 18,
	MOD_UNK19 = 19,
	MOD_TIRESMOKE = 20,
	MOD_UNK21 = 21,
	MOD_XENONLIGHTS = 22,
	MOD_FRONTWHEELS = 23,
	MOD_BACKWHEELS = 24, //Bikes only

	// Benny's
	MOD_PLATEHOLDER = 25,
	MOD_VANITY_PLATES = 26,
	MOD_TRIM1 = 27,
	MOD_ORNAMENTS = 28,
	MOD_DASHBOARD = 29,
	MOD_DIAL = 30,
	MOD_DOOR_SPEAKER = 31,
	MOD_SEATS = 32,
	MOD_STEERINGWHEEL = 33,
	MOD_SHIFTER_LEAVERS = 34,
	MOD_PLAQUES = 35,
	MOD_SPEAKERS = 36,
	MOD_TRUNK = 37,
	MOD_HYDRULICS = 38,
	MOD_ENGINE_BLOCK = 39,
	MOD_AIR_FILTER = 40,
	MOD_STRUTS = 41,
	MOD_ARCH_COVER = 42,
	MOD_AERIALS = 43,
	MOD_TRIM = 44,
	MOD_TANK = 45,
	MOD_WINDOWS = 46,
	MOD_UNK47 = 47,
	MOD_LIVERY = 48
};

typedef enum {
	VEHICLE_MOD_BENNY_PLATEHOLDER = 25,
	VEHICLE_MOD_BENNY_VANITY_PLATES,
	VEHICLE_MOD_BENNY_TRIM,
	VEHICLE_MOD_BENNY_ORNAMENTS,
	VEHICLE_MOD_BENNY_DASHBOARD,
	VEHICLE_MOD_BENNY_DIAL,
	VEHICLE_MOD_BENNY_DOOR_SPEAKER,
	VEHICLE_MOD_BENNY_SEATS,
	VEHICLE_MOD_BENNY_STEERINGWHEEL,
	VEHICLE_MOD_BENNY_SHIFTER_LEAVERS,
	VEHICLE_MOD_BENNY_PLAQUES,
	VEHICLE_MOD_BENNY_SPEAKERS,
	VEHICLE_MOD_BENNY_TRUNK,
	VEHICLE_MOD_BENNY_HYDRULICS,
	VEHICLE_MOD_BENNY_ENGINE_BLOCK,
	VEHICLE_MOD_BENNY_AIR_FILTER,
	VEHICLE_MOD_BENNY_STRUTS,
	VEHICLE_MOD_BENNY_ARCH_COVER,
	VEHICLE_MOD_BENNY_AERIALS,
	VEHICLE_MOD_BENNY_TRIM2,
	VEHICLE_MOD_BENNY_TANK,
	VEHICLE_MOD_BENNY_WINDOWS,
	VEHICLE_MOD_BENNY_UNK47,
	VEHICLE_MOD_BENNY_LIVERY,
	VEHICLE_MOD_BENNY_UNK49,
} bennyMods;

typedef enum {
	VEHICLE_WHEEL_TYPE_SPORT,
	VEHICLE_WHEEL_TYPE_MUSCLE,
	VEHICLE_WHEEL_TYPE_LOWRIDER,
	VEHICLE_WHEEL_TYPE_SUV,
	VEHICLE_WHEEL_TYPE_OFFROAD,
	VEHICLE_WHEEL_TYPE_TUNER,
	VEHICLE_WHEEL_TYPE_BIKE,
	VEHICLE_WHEEL_TYPE_HIGHEND,
} _wheelTypes;

typedef enum {
	VEHICLE_PLATE_TYPE_BLUE_ON_WHITE_1,
	VEHICLE_PLATE_TYPE_YELLOW_ON_BLACK,
	VEHICLE_PLATE_TYPE_YELLOW_ON_BLUE,
	VEHICLE_PLATE_TYPE_BLUE_ON_WHITE_2,
	VEHICLE_PLATE_TYPE_BLUE_ON_WHITE_3,
	VEHICLE_PLATE_TYPE_NORTH_YANKTON,
} plateTypes;

typedef enum {
	FRAME_FLAG_EXPLOSIVE_AMMO = (1 << 3),
	FRAME_FLAG_FIRE_AMMO = (1 << 4),
	FRAME_FLAG_EXPLOSIVE_MELEE = (1 << 5),
	FRAME_FLAG_SUPER_JUMP = (1 << 6),
} frameFlag;

enum FlagID {
	PED_FLAG_CAN_FLY_THRU_WINDSCREEN = 32,
	PED_FLAG_NO_COLLISION = 52,
	PED_FLAG_NO_COLLIDE = 62,
	PED_FLAG_DEAD = 71,
	PED_FLAG_SUPER_DEAD = 73,
	PED_FLAG_IS_AIMING = 78,
	PED_FLAG_DRUNK = 100,
	PED_FLAG_NM_MESSAGE_466 = 125,
	PED_FLAG_INJURED_LIMP = 166,
	PED_FLAG_INJURED_LIMP_2 = 170,
	PED_FLAG_INJURED_DOWN = 187,
	PED_FLAG_SHRINK = 223,
	PED_FLAG_NO_WRITHE = 281,
	PED_FLAG_FREEZE = 292,
	PED_FLAG_IS_STILL = 301,
	PED_FLAG_ALPHA = 410,
};

enum controllerInput {
	INPUT_NEXT_CAMERA = 0,
	INPUT_LOOK_LR = 1,
	INPUT_LOOK_UD = 2,
	INPUT_LOOK_UP_ONLY = 3,
	INPUT_LOOK_DOWN_ONLY = 4,
	INPUT_LOOK_LEFT_ONLY = 5,
	INPUT_LOOK_RIGHT_ONLY = 6,
	INPUT_CINEMATIC_SLOWMO = 7,
	INPUT_SCRIPTED_FLY_UD = 8,
	INPUT_SCRIPTED_FLY_LR = 9,
	INPUT_SCRIPTED_FLY_ZUP = 10,
	INPUT_SCRIPTED_FLY_ZDOWN = 11,
	INPUT_WEAPON_WHEEL_UD = 12,
	INPUT_WEAPON_WHEEL_LR = 13,
	INPUT_WEAPON_WHEEL_NEXT = 14,
	INPUT_WEAPON_WHEEL_PREV = 15,
	INPUT_SELECT_NEXT_WEAPON = 16,
	INPUT_SELECT_PREV_WEAPON = 17,
	INPUT_SKIP_CUTSCENE = 18,
	INPUT_CHARACTER_WHEEL = 19,
	INPUT_MULTIPLAYER_INFO = 20,
	INPUT_SPRINT = 21,
	INPUT_JUMP = 22,
	INPUT_ENTER = 23,
	INPUT_ATTACK = 24,
	INPUT_AIM = 25,
	INPUT_LOOK_BEHIND = 26,
	INPUT_PHONE = 27,
	INPUT_SPECIAL_ABILITY = 28,
	INPUT_SPECIAL_ABILITY_SECONDARY = 29,
	INPUT_MOVE_LR = 30,
	INPUT_MOVE_UD = 31,
	INPUT_MOVE_UP_ONLY = 32,
	INPUT_MOVE_DOWN_ONLY = 33,
	INPUT_MOVE_LEFT_ONLY = 34,
	INPUT_MOVE_RIGHT_ONLY = 35,
	INPUT_DUCK = 36,
	INPUT_SELECT_WEAPON = 37,
	INPUT_PICKUP = 38,
	INPUT_SNIPER_ZOOM = 39,
	INPUT_SNIPER_ZOOM_IN_ONLY = 40,
	INPUT_SNIPER_ZOOM_OUT_ONLY = 41,
	INPUT_SNIPER_ZOOM_IN_SECONDARY = 42,
	INPUT_SNIPER_ZOOM_OUT_SECONDARY = 43,
	INPUT_COVER = 44,
	INPUT_RELOAD = 45,
	INPUT_TALK = 46,
	INPUT_DETONATE = 47,
	INPUT_HUD_SPECIAL = 48,
	INPUT_ARREST = 49,
	INPUT_ACCURATE_AIM = 50,
	INPUT_CONTEXT = 51,
	INPUT_CONTEXT_SECONDARY = 52,
	INPUT_WEAPON_SPECIAL = 53,
	INPUT_WEAPON_SPECIAL_TWO = 54,
	INPUT_DIVE = 55,
	INPUT_DROP_WEAPON = 56,
	INPUT_DROP_AMMO = 57,
	INPUT_THROW_GRENADE = 58,
	INPUT_VEH_MOVE_LR = 59,
	INPUT_VEH_MOVE_UD = 60,
	INPUT_VEH_MOVE_UP_ONLY = 61,
	INPUT_VEH_MOVE_DOWN_ONLY = 62,
	INPUT_VEH_MOVE_LEFT_ONLY = 63,
	INPUT_VEH_MOVE_RIGHT_ONLY = 64,
	INPUT_VEH_SPECIAL = 65,
	INPUT_VEH_GUN_LR = 66,
	INPUT_VEH_GUN_UD = 67,
	INPUT_VEH_AIM = 68,
	INPUT_VEH_ATTACK = 69,
	INPUT_VEH_ATTACK2 = 70,
	INPUT_VEH_ACCELERATE = 71,
	INPUT_VEH_BRAKE = 72,
	INPUT_VEH_DUCK = 73,
	INPUT_VEH_HEADLIGHT = 74,
	INPUT_VEH_EXIT = 75,
	INPUT_VEH_HANDBRAKE = 76,
	INPUT_VEH_HOTWIRE_LEFT = 77,
	INPUT_VEH_HOTWIRE_RIGHT = 78,
	INPUT_VEH_LOOK_BEHIND = 79,
	INPUT_VEH_CIN_CAM = 80,
	INPUT_VEH_NEXT_RADIO = 81,
	INPUT_VEH_PREV_RADIO = 82,
	INPUT_VEH_NEXT_RADIO_TRACK = 83,
	INPUT_VEH_PREV_RADIO_TRACK = 84,
	INPUT_VEH_RADIO_WHEEL = 85,
	INPUT_VEH_HORN = 86,
	INPUT_VEH_FLY_THROTTLE_UP = 87,
	INPUT_VEH_FLY_THROTTLE_DOWN = 88,
	INPUT_VEH_FLY_YAW_LEFT = 89,
	INPUT_VEH_FLY_YAW_RIGHT = 90,
	INPUT_VEH_PASSENGER_AIM = 91,
	INPUT_VEH_PASSENGER_ATTACK = 92,
	INPUT_VEH_SPECIAL_ABILITY_FRANKLIN = 93,
	INPUT_VEH_STUNT_UD = 94,
	INPUT_VEH_CINEMATIC_UD = 95,
	INPUT_VEH_CINEMATIC_UP_ONLY = 96,
	INPUT_VEH_CINEMATIC_DOWN_ONLY = 97,
	INPUT_VEH_CINEMATIC_LR = 98,
	INPUT_VEH_SELECT_NEXT_WEAPON = 99,
	INPUT_VEH_SELECT_PREV_WEAPON = 100,
	INPUT_VEH_ROOF = 101,
	INPUT_VEH_JUMP = 102,
	INPUT_VEH_GRAPPLING_HOOK = 103,
	INPUT_VEH_SHUFFLE = 104,
	INPUT_VEH_DROP_PROJECTILE = 105,
	INPUT_VEH_MOUSE_CONTROL_OVERRIDE = 106,
	INPUT_VEH_FLY_ROLL_LR = 107,
	INPUT_VEH_FLY_ROLL_LEFT_ONLY = 108,
	INPUT_VEH_FLY_ROLL_RIGHT_ONLY = 109,
	INPUT_VEH_FLY_PITCH_UD = 110,
	INPUT_VEH_FLY_PITCH_UP_ONLY = 111,
	INPUT_VEH_FLY_PITCH_DOWN_ONLY = 112,
	INPUT_VEH_FLY_UNDERCARRIAGE = 113,
	INPUT_VEH_FLY_ATTACK = 114,
	INPUT_VEH_FLY_SELECT_NEXT_WEAPON = 115,
	INPUT_VEH_FLY_SELECT_PREV_WEAPON = 116,
	INPUT_VEH_FLY_SELECT_TARGET_LEFT = 117,
	INPUT_VEH_FLY_SELECT_TARGET_RIGHT = 118,
	INPUT_VEH_FLY_VERTICAL_FLIGHT_MODE = 119,
	INPUT_VEH_FLY_DUCK = 120,
	INPUT_VEH_FLY_ATTACK_CAMERA = 121,
	INPUT_VEH_FLY_MOUSE_CONTROL_OVERRIDE = 122,
	INPUT_VEH_SUB_TURN_LR = 123,
	INPUT_VEH_SUB_TURN_LEFT_ONLY = 124,
	INPUT_VEH_SUB_TURN_RIGHT_ONLY = 125,
	INPUT_VEH_SUB_PITCH_UD = 126,
	INPUT_VEH_SUB_PITCH_UP_ONLY = 127,
	INPUT_VEH_SUB_PITCH_DOWN_ONLY = 128,
	INPUT_VEH_SUB_THROTTLE_UP = 129,
	INPUT_VEH_SUB_THROTTLE_DOWN = 130,
	INPUT_VEH_SUB_ASCEND = 131,
	INPUT_VEH_SUB_DESCEND = 132,
	INPUT_VEH_SUB_TURN_HARD_LEFT = 133,
	INPUT_VEH_SUB_TURN_HARD_RIGHT = 134,
	INPUT_VEH_SUB_MOUSE_CONTROL_OVERRIDE = 135,
	INPUT_VEH_PUSHBIKE_PEDAL = 136,
	INPUT_VEH_PUSHBIKE_SPRINT = 137,
	INPUT_VEH_PUSHBIKE_FRONT_BRAKE = 138,
	INPUT_VEH_PUSHBIKE_REAR_BRAKE = 139,
	INPUT_MELEE_ATTACK_LIGHT = 140,
	INPUT_MELEE_ATTACK_HEAVY = 141,
	INPUT_MELEE_ATTACK_ALTERNATE = 142,
	INPUT_MELEE_BLOCK = 143,
	INPUT_PARACHUTE_DEPLOY = 144,
	INPUT_PARACHUTE_DETACH = 145,
	INPUT_PARACHUTE_TURN_LR = 146,
	INPUT_PARACHUTE_TURN_LEFT_ONLY = 147,
	INPUT_PARACHUTE_TURN_RIGHT_ONLY = 148,
	INPUT_PARACHUTE_PITCH_UD = 149,
	INPUT_PARACHUTE_PITCH_UP_ONLY = 150,
	INPUT_PARACHUTE_PITCH_DOWN_ONLY = 151,
	INPUT_PARACHUTE_BRAKE_LEFT = 152,
	INPUT_PARACHUTE_BRAKE_RIGHT = 153,
	INPUT_PARACHUTE_SMOKE = 154,
	INPUT_PARACHUTE_PRECISION_LANDING = 155,
	INPUT_MAP = 156,
	INPUT_SELECT_WEAPON_UNARMED = 157,
	INPUT_SELECT_WEAPON_MELEE = 158,
	INPUT_SELECT_WEAPON_HANDGUN = 159,
	INPUT_SELECT_WEAPON_SHOTGUN = 160,
	INPUT_SELECT_WEAPON_SMG = 161,
	INPUT_SELECT_WEAPON_AUTO_RIFLE = 162,
	INPUT_SELECT_WEAPON_SNIPER = 163,
	INPUT_SELECT_WEAPON_HEAVY = 164,
	INPUT_SELECT_WEAPON_SPECIAL = 165,
	INPUT_SELECT_CHARACTER_MICHAEL = 166,
	INPUT_SELECT_CHARACTER_FRANKLIN = 167,
	INPUT_SELECT_CHARACTER_TREVOR = 168,
	INPUT_SELECT_CHARACTER_MULTIPLAYER = 169,
	INPUT_SAVE_REPLAY_CLIP = 170,
	INPUT_SPECIAL_ABILITY_PC = 171,
	INPUT_CELLPHONE_UP = 172,
	INPUT_CELLPHONE_DOWN = 173,
	INPUT_CELLPHONE_LEFT = 174,
	INPUT_CELLPHONE_RIGHT = 175,
	INPUT_CELLPHONE_SELECT = 176,
	INPUT_CELLPHONE_CANCEL = 177,
	INPUT_CELLPHONE_OPTION = 178,
	INPUT_CELLPHONE_EXTRA_OPTION = 179,
	INPUT_CELLPHONE_SCROLL_FORWARD = 180,
	INPUT_CELLPHONE_SCROLL_BACKWARD = 181,
	INPUT_CELLPHONE_CAMERA_FOCUS_LOCK = 182,
	INPUT_CELLPHONE_CAMERA_GRID = 183,
	INPUT_CELLPHONE_CAMERA_SELFIE = 184,
	INPUT_CELLPHONE_CAMERA_DOF = 185,
	INPUT_CELLPHONE_CAMERA_EXPRESSION = 186,
	INPUT_FRONTEND_DOWN = 187,
	INPUT_FRONTEND_UP = 188,
	INPUT_FRONTEND_LEFT = 189,
	INPUT_FRONTEND_RIGHT = 190,
	INPUT_FRONTEND_RDOWN = 191,
	INPUT_FRONTEND_RUP = 192,
	INPUT_FRONTEND_RLEFT = 193,
	INPUT_FRONTEND_RRIGHT = 194,
	INPUT_FRONTEND_AXIS_X = 195,
	INPUT_FRONTEND_AXIS_Y = 196,
	INPUT_FRONTEND_RIGHT_AXIS_X = 197,
	INPUT_FRONTEND_RIGHT_AXIS_Y = 198,
	INPUT_FRONTEND_PAUSE = 199,
	INPUT_FRONTEND_PAUSE_ALTERNATE = 200,
	INPUT_FRONTEND_ACCEPT = 201,
	INPUT_FRONTEND_CANCEL = 202,
	INPUT_FRONTEND_X = 203,
	INPUT_FRONTEND_Y = 204,
	INPUT_FRONTEND_LB = 205,
	INPUT_FRONTEND_RB = 206,
	INPUT_FRONTEND_LT = 207,
	INPUT_FRONTEND_RT = 208,
	INPUT_FRONTEND_LS = 209,
	INPUT_FRONTEND_RS = 210,
	INPUT_FRONTEND_LEADERBOARD = 211,
	INPUT_FRONTEND_SOCIAL_CLUB = 212,
	INPUT_FRONTEND_SOCIAL_CLUB_SECONDARY = 213,
	INPUT_FRONTEND_DELETE = 214,
	INPUT_FRONTEND_ENDSCREEN_ACCEPT = 215,
	INPUT_FRONTEND_ENDSCREEN_EXPAND = 216,
	INPUT_FRONTEND_SELECT = 217,
	INPUT_SCRIPT_LEFT_AXIS_X = 218,
	INPUT_SCRIPT_LEFT_AXIS_Y = 219,
	INPUT_SCRIPT_RIGHT_AXIS_X = 220,
	INPUT_SCRIPT_RIGHT_AXIS_Y = 221,
	INPUT_SCRIPT_RUP = 222,
	INPUT_SCRIPT_RDOWN = 223,
	INPUT_SCRIPT_RLEFT = 224,
	INPUT_SCRIPT_RRIGHT = 225,
	INPUT_SCRIPT_LB = 226,
	INPUT_SCRIPT_RB = 227,
	INPUT_SCRIPT_LT = 228,
	INPUT_SCRIPT_RT = 229,
	INPUT_SCRIPT_LS = 230,
	INPUT_SCRIPT_RS = 231,
	INPUT_SCRIPT_PAD_UP = 232,
	INPUT_SCRIPT_PAD_DOWN = 233,
	INPUT_SCRIPT_PAD_LEFT = 234,
	INPUT_SCRIPT_PAD_RIGHT = 235,
	INPUT_SCRIPT_SELECT = 236,
	INPUT_CURSOR_ACCEPT = 237,
	INPUT_CURSOR_CANCEL = 238,
	INPUT_CURSOR_X = 239,
	INPUT_CURSOR_Y = 240,
	INPUT_CURSOR_SCROLL_UP = 241,
	INPUT_CURSOR_SCROLL_DOWN = 242,
	INPUT_ENTER_CHEAT_CODE = 243,
	INPUT_INTERACTION_MENU = 244,
	INPUT_MP_TEXT_CHAT_ALL = 245,
	INPUT_MP_TEXT_CHAT_TEAM = 246,
	INPUT_MP_TEXT_CHAT_FRIENDS = 247,
	INPUT_MP_TEXT_CHAT_CREW = 248,
	INPUT_PUSH_TO_TALK = 249,
	INPUT_CREATOR_LS = 250,
	INPUT_CREATOR_RS = 251,
	INPUT_CREATOR_LT = 252,
	INPUT_CREATOR_RT = 253,
	INPUT_CREATOR_MENU_TOGGLE = 254,
	INPUT_CREATOR_ACCEPT = 255,
	INPUT_CREATOR_DELETE = 256,
	INPUT_ATTACK2 = 257,
	INPUT_RAPPEL_JUMP = 258,
	INPUT_RAPPEL_LONG_JUMP = 259,
	INPUT_RAPPEL_SMASH_WINDOW = 260,
	INPUT_PREV_WEAPON = 261,
	INPUT_NEXT_WEAPON = 262,
	INPUT_MELEE_ATTACK1 = 263,
	INPUT_MELEE_ATTACK2 = 264,
	INPUT_WHISTLE = 265,
	INPUT_MOVE_LEFT = 266,
	INPUT_MOVE_RIGHT = 267,
	INPUT_MOVE_UP = 268,
	INPUT_MOVE_DOWN = 269,
	INPUT_LOOK_LEFT = 270,
	INPUT_LOOK_RIGHT = 271,
	INPUT_LOOK_UP = 272,
	INPUT_LOOK_DOWN = 273,
	INPUT_SNIPER_ZOOM_IN = 274,
	INPUT_SNIPER_ZOOM_OUT = 275,
	INPUT_SNIPER_ZOOM_IN_ALTERNATE = 276,
	INPUT_SNIPER_ZOOM_OUT_ALTERNATE = 277,
	INPUT_VEH_MOVE_LEFT = 278,
	INPUT_VEH_MOVE_RIGHT = 279,
	INPUT_VEH_MOVE_UP = 280,
	INPUT_VEH_MOVE_DOWN = 281,
	INPUT_VEH_GUN_LEFT = 282,
	INPUT_VEH_GUN_RIGHT = 283,
	INPUT_VEH_GUN_UP = 284,
	INPUT_VEH_GUN_DOWN = 285,
	INPUT_VEH_LOOK_LEFT = 286,
	INPUT_VEH_LOOK_RIGHT = 287,
	INPUT_REPLAY_START_STOP_RECORDING = 288,
	INPUT_REPLAY_START_STOP_RECORDING_SECONDARY = 289,
	INPUT_SCALED_LOOK_LR = 290,
	INPUT_SCALED_LOOK_UD = 291,
	INPUT_SCALED_LOOK_UP_ONLY = 292,
	INPUT_SCALED_LOOK_DOWN_ONLY = 293,
	INPUT_SCALED_LOOK_LEFT_ONLY = 294,
	INPUT_SCALED_LOOK_RIGHT_ONLY = 295,
	INPUT_REPLAY_MARKER_DELETE = 296,
	INPUT_REPLAY_CLIP_DELETE = 297,
	INPUT_REPLAY_PAUSE = 298,
	INPUT_REPLAY_REWIND = 299,
	INPUT_REPLAY_FFWD = 300,
	INPUT_REPLAY_NEWMARKER = 301,
	INPUT_REPLAY_RECORD = 302,
	INPUT_REPLAY_SCREENSHOT = 303,
	INPUT_REPLAY_HIDEHUD = 304,
	INPUT_REPLAY_STARTPOINT = 305,
	INPUT_REPLAY_ENDPOINT = 306,
	INPUT_REPLAY_ADVANCE = 307,
	INPUT_REPLAY_BACK = 308,
	INPUT_REPLAY_TOOLS = 309,
	INPUT_REPLAY_RESTART = 310,
	INPUT_REPLAY_SHOWHOTKEY = 311,
	INPUT_REPLAY_CYCLEMARKERLEFT = 312,
	INPUT_REPLAY_CYCLEMARKERRIGHT = 313,
	INPUT_REPLAY_FOVINCREASE = 314,
	INPUT_REPLAY_FOVDECREASE = 315,
	INPUT_REPLAY_CAMERAUP = 316,
	INPUT_REPLAY_CAMERADOWN = 317,
	INPUT_REPLAY_SAVE = 318,
	INPUT_REPLAY_TOGGLETIME = 319,
	INPUT_REPLAY_TOGGLETIPS = 320,
	INPUT_REPLAY_PREVIEW = 321,
	INPUT_REPLAY_TOGGLE_TIMELINE = 322,
	INPUT_REPLAY_TIMELINE_PICKUP_CLIP = 323,
	INPUT_REPLAY_TIMELINE_DUPLICATE_CLIP = 324,
	INPUT_REPLAY_TIMELINE_PLACE_CLIP = 325,
	INPUT_REPLAY_CTRL = 326,
	INPUT_REPLAY_TIMELINE_SAVE = 327,
	INPUT_REPLAY_PREVIEW_AUDIO = 328,
	INPUT_VEH_DRIVE_LOOK = 329,
	INPUT_VEH_DRIVE_LOOK2 = 330,
	INPUT_VEH_FLY_ATTACK2 = 331,
	INPUT_RADIO_WHEEL_UD = 332,
	INPUT_RADIO_WHEEL_LR = 333,
	INPUT_VEH_SLOWMO_UD = 334,
	INPUT_VEH_SLOWMO_UP_ONLY = 335,
	INPUT_VEH_SLOWMO_DOWN_ONLY = 336,
	INPUT_MAP_POI = 337
};

typedef enum {
	OBJECT_ID_FREED_EVENT,
	OBJECT_ID_REQUEST_EVENT,
	ARRAY_DATA_VERIFY_EVENT,
	SCRIPT_ARRAY_DATA_VERIFY_EVENT,
	REQUEST_CONTROL_EVENT,
	GIVE_CONTROL_EVENT,
	WEAPON_DAMAGE_EVENT,
	REQUEST_PICKUP_EVENT,
	REQUEST_MAP_PICKUP_EVENT,
	GAME_CLOCK_EVENT,
	GAME_WEATHER_EVENT,
	RESPAWN_PLAYER_PED_EVENT,
	GIVE_WEAPON_EVENT,
	REMOVE_WEAPON_EVENT,
	REMOVE_ALL_WEAPONS_EVENT,
	VEHICLE_COMPONENT_CONTROL_EVENT,
	FIRE_EVENT,
	EXPLOSION_EVENT,
	START_PROJECTILE_EVENT,
	UPDATE_PROJECTILE_TARGET_EVENT,
	REMOVE_PROJECTILE_ENTITY_EVENT,
	BREAK_PROJECTILE_TARGET_LOCK_EVENT,
	ALTER_WANTED_LEVEL_EVENT,
	CHANGE_RADIO_STATION_EVENT,
	RAGDOLL_REQUEST_EVENT,
	PLAYER_TAUNT_EVENT,
	PLAYER_CARD_STAT_EVENT,
	DOOR_BREAK_EVENT,
	SCRIPTED_GAME_EVENT,
	REMOTE_SCRIPT_INFO_EVENT,
	REMOTE_SCRIPT_LEAVE_EVENT,
	MARK_AS_NO_LONGER_NEEDED_EVENT,
	CONVERT_TO_SCRIPT_ENTITY_EVENT,
	SCRIPT_WORLD_STATE_EVENT,
	CLEAR_AREA_EVENT,
	CLEAR_RECTANGLE_AREA_EVENT,
	NETWORK_REQUEST_SYNCED_SCENE_EVENT,
	NETWORK_START_SYNCED_SCENE_EVENT,
	NETWORK_STOP_SYNCED_SCENE_EVENT,
	NETWORK_UPDATE_SYNCED_SCENE_EVENT,
	INCIDENT_ENTITY_EVENT,
	GIVE_PED_SCRIPTED_TASK_EVENT,
	GIVE_PED_SEQUENCE_TASK_EVENT,
	NETWORK_CLEAR_PED_TASKS_EVENT,
	NETWORK_START_PED_ARREST_EVENT,
	NETWORK_START_PED_UNCUFF_EVENT,
	NETWORK_SOUND_CAR_HORN_EVENT,
	NETWORK_ENTITY_AREA_STATUS_EVENT,
	NETWORK_GARAGE_OCCUPIED_STATUS_EVENT,
	PED_CONVERSATION_LINE_EVENT,
	SCRIPT_ENTITY_STATE_CHANGE_EVENT,
	NETWORK_PLAY_SOUND_EVENT,
	NETWORK_STOP_SOUND_EVENT,
	NETWORK_PLAY_AIRDEFENSE_FIRE_EVENT,
	NETWORK_BANK_REQUEST_EVENT,
	NETWORK_AUDIO_BARK_EVENT, // New 1.47
	REQUEST_DOOR_EVENT,
	NETWORK_TRAIN_REPORT_EVENT,
	NETWORK_TRAIN_REQUEST_EVENT,
	NETWORK_INCREMENT_STAT_EVENT,
	MODIFY_VEHICLE_LOCK_WORD_STATE_DATA,
	MODIFY_PTFX_WORD_STATE_DATA_SCRIPTED_EVOLVE_EVENT, // New 1.46
	REQUEST_PHONE_EXPLOSION_EVENT,
	REQUEST_DETACHMENT_EVENT,
	KICK_VOTES_EVENT,
	GIVE_PICKUP_REWARDS_EVENT,
	NETWORK_CRC_HASH_CHECK_EVENT,
	BLOW_UP_VEHICLE_EVENT,
	NETWORK_SPECIAL_FIRE_EQUIPPED_WEAPON,
	NETWORK_RESPONDED_TO_THREAT_EVENT,
	NETWORK_SHOUT_TARGET_POSITION,
	VOICE_DRIVEN_MOUTH_MOVEMENT_FINISHED_EVENT,
	PICKUP_DESTROYED_EVENT,
	UPDATE_PLAYER_SCARS_EVENT,
	NETWORK_CHECK_EXE_SIZE_EVENT,
	NETWORK_PTFX_EVENT,
	NETWORK_PED_SEEN_DEAD_PED_EVENT,
	REMOVE_STICKY_BOMB_EVENT,
	NETWORK_CHECK_CODE_CRCS_EVENT,
	INFORM_SILENCED_GUNSHOT_EVENT,
	PED_PLAY_PAIN_EVENT,
	CACHE_PLAYER_HEAD_BLEND_DATA_EVENT,
	REMOVE_PED_FROM_PEDGROUP_EVENT,
	REPORT_MYSELF_EVENT,
	REPORT_CASH_SPAWN_EVENT,
	ACTIVATE_VEHICLE_SPECIAL_ABILITY_EVENT,
	BLOCK_WEAPON_SELECTION,
	NETWORK_CHECK_CATALOG_CRC
} networkEvent;

namespace HUDComponents {
	enum {
		HUD,
		HUD_WANTED_STARS,
		HUD_WEAPON_ICON,
		HUD_CASH,
		HUD_MP_CASH,
		HUD_MP_MESSAGE,
		HUD_VEHICLE_NAME,
		HUD_AREA_NAME,
		HUD_VEHICLE_CLASS,
		HUD_STREET_NAME,
		HUD_HELP_TEXT,
		HUD_FLOATING_HELP_TEXT_1,
		HUD_FLOATING_HELP_TEXT_2,
		HUD_CASH_CHANGE,
		HUD_RETICLE,
		HUD_SUBTITLE_TEXT,
		HUD_RADIO_STATIONS,
		HUD_SAVING_GAME,
		HUD_GAME_STREAM,
		HUD_WEAPON_WHEEL,
		HUD_WEAPON_WHEEL_STATS,
		HUD_END,
	};
}

enum PoolActions {
	VEHICLE_ESP,
	VEHICLE_CHAOS,
	VEHICLE_EXPLODE,
	VEHICLE_KILLDRIVER,
	VEHICLE_LAUNCH,
	VEHICLE_BOOST,
	VEHICLE_KICKFLIP,
	VEHICLE_DELETE,
	VEHICLE_PUSH,
	VEHICLE_FULLYTUNE,
	VEHICLE_RANDOMPAINTJOB,
	VEHICLE_FIX,
	VEHICLE_SCORCH,
	VEHICLE_COMETOME,
	VEHICLE_NEGATIVEGRAVITY,
	VEHICLE_NORMALGRAVITY,
	VEHICLE_HOSTILETRAFFIC,
	VEHICLE_STOREHANDLE,
	DELETEALLNEARBYENTITES,
	VEHICLE_ATTACHMENTPREVENTION,

	PED_ESP,
	PED_CLEARTASKS,
	PED_JUMP,
	PED_COWER,
	PED_HANDSUP,
	PED_WANDER,
	PED_COMETOME,
	PED_KILL,
	PED_EXPLODE,
	PED_CLONE,
	PED_DELETE,
	PED_SHRINK,
	PED_ENLARGE,
	PED_LAUNCH,
	PED_CLONECREATIONPREVENTION,
	PED_HOSTILEPEDS,
	PED_STOREHANDLE,
	PED_ATTACHMENTPREVENTION,
};

enum HudColor {
	HUD_COLOUR_PURE_WHITE = 0,
	HUD_COLOUR_WHITE = 1,
	HUD_COLOUR_BLACK = 2,
	HUD_COLOUR_GREY = 3,
	HUD_COLOUR_GREYLIGHT = 4,
	HUD_COLOUR_GREYDARK = 5,
	HUD_COLOUR_RED = 6,
	HUD_COLOUR_REDLIGHT = 7,
	HUD_COLOUR_REDDARK = 8,
	HUD_COLOUR_BLUE = 9,
	HUD_COLOUR_BLUELIGHT = 10,
	HUD_COLOUR_BLUEDARK = 11,
	HUD_COLOUR_YELLOW = 12,
	HUD_COLOUR_YELLOWLIGHT = 13,
	HUD_COLOUR_YELLOWDARK = 14,
	HUD_COLOUR_ORANGE = 15,
	HUD_COLOUR_ORANGELIGHT = 16,
	HUD_COLOUR_ORANGEDARK = 17,
	HUD_COLOUR_GREEN = 18,
	HUD_COLOUR_GREENLIGHT = 19,
	HUD_COLOUR_GREENDARK = 20,
	HUD_COLOUR_PURPLE = 21,
	HUD_COLOUR_PURPLELIGHT = 22,
	HUD_COLOUR_PURPLEDARK = 23,
	HUD_COLOUR_PINK = 24,
	HUD_COLOUR_RADAR_HEALTH = 25,
	HUD_COLOUR_RADAR_ARMOUR = 26,
	HUD_COLOUR_RADAR_DAMAGE = 27,
	HUD_COLOUR_NET_PLAYER1 = 28,
	HUD_COLOUR_NET_PLAYER2 = 29,
	HUD_COLOUR_NET_PLAYER3 = 30,
	HUD_COLOUR_NET_PLAYER4 = 31,
	HUD_COLOUR_NET_PLAYER5 = 32,
	HUD_COLOUR_NET_PLAYER6 = 33,
	HUD_COLOUR_NET_PLAYER7 = 34,
	HUD_COLOUR_NET_PLAYER8 = 35,
	HUD_COLOUR_NET_PLAYER9 = 36,
	HUD_COLOUR_NET_PLAYER10 = 37,
	HUD_COLOUR_NET_PLAYER11 = 38,
	HUD_COLOUR_NET_PLAYER12 = 39,
	HUD_COLOUR_NET_PLAYER13 = 40,
	HUD_COLOUR_NET_PLAYER14 = 41,
	HUD_COLOUR_NET_PLAYER15 = 42,
	HUD_COLOUR_NET_PLAYER16 = 43,
	HUD_COLOUR_NET_PLAYER17 = 44,
	HUD_COLOUR_NET_PLAYER18 = 45,
	HUD_COLOUR_NET_PLAYER19 = 46,
	HUD_COLOUR_NET_PLAYER20 = 47,
	HUD_COLOUR_NET_PLAYER21 = 48,
	HUD_COLOUR_NET_PLAYER22 = 49,
	HUD_COLOUR_NET_PLAYER23 = 50,
	HUD_COLOUR_NET_PLAYER24 = 51,
	HUD_COLOUR_NET_PLAYER25 = 52,
	HUD_COLOUR_NET_PLAYER26 = 53,
	HUD_COLOUR_NET_PLAYER27 = 54,
	HUD_COLOUR_NET_PLAYER28 = 55,
	HUD_COLOUR_NET_PLAYER29 = 56,
	HUD_COLOUR_NET_PLAYER30 = 57,
	HUD_COLOUR_NET_PLAYER31 = 58,
	HUD_COLOUR_NET_PLAYER32 = 59,
	HUD_COLOUR_SIMPLEBLIP_DEFAULT = 60,
	HUD_COLOUR_MENU_BLUE = 61,
	HUD_COLOUR_MENU_GREY_LIGHT = 62,
	HUD_COLOUR_MENU_BLUE_EXTRA_DARK = 63,
	HUD_COLOUR_MENU_YELLOW = 64,
	HUD_COLOUR_MENU_YELLOW_DARK = 65,
	HUD_COLOUR_MENU_GREEN = 66,
	HUD_COLOUR_MENU_GREY = 67,
	HUD_COLOUR_MENU_GREY_DARK = 68,
	HUD_COLOUR_MENU_HIGHLIGHT = 69,
	HUD_COLOUR_MENU_STANDARD = 70,
	HUD_COLOUR_MENU_DIMMED = 71,
	HUD_COLOUR_MENU_EXTRA_DIMMED = 72,
	HUD_COLOUR_BRIEF_TITLE = 73,
	HUD_COLOUR_MID_GREY_MP = 74,
	HUD_COLOUR_NET_PLAYER1_DARK = 75,
	HUD_COLOUR_NET_PLAYER2_DARK = 76,
	HUD_COLOUR_NET_PLAYER3_DARK = 77,
	HUD_COLOUR_NET_PLAYER4_DARK = 78,
	HUD_COLOUR_NET_PLAYER5_DARK = 79,
	HUD_COLOUR_NET_PLAYER6_DARK = 80,
	HUD_COLOUR_NET_PLAYER7_DARK = 81,
	HUD_COLOUR_NET_PLAYER8_DARK = 82,
	HUD_COLOUR_NET_PLAYER9_DARK = 83,
	HUD_COLOUR_NET_PLAYER10_DARK = 84,
	HUD_COLOUR_NET_PLAYER11_DARK = 85,
	HUD_COLOUR_NET_PLAYER12_DARK = 86,
	HUD_COLOUR_NET_PLAYER13_DARK = 87,
	HUD_COLOUR_NET_PLAYER14_DARK = 88,
	HUD_COLOUR_NET_PLAYER15_DARK = 89,
	HUD_COLOUR_NET_PLAYER16_DARK = 90,
	HUD_COLOUR_NET_PLAYER17_DARK = 91,
	HUD_COLOUR_NET_PLAYER18_DARK = 92,
	HUD_COLOUR_NET_PLAYER19_DARK = 93,
	HUD_COLOUR_NET_PLAYER20_DARK = 94,
	HUD_COLOUR_NET_PLAYER21_DARK = 95,
	HUD_COLOUR_NET_PLAYER22_DARK = 96,
	HUD_COLOUR_NET_PLAYER23_DARK = 97,
	HUD_COLOUR_NET_PLAYER24_DARK = 98,
	HUD_COLOUR_NET_PLAYER25_DARK = 99,
	HUD_COLOUR_NET_PLAYER26_DARK = 100,
	HUD_COLOUR_NET_PLAYER27_DARK = 101,
	HUD_COLOUR_NET_PLAYER28_DARK = 102,
	HUD_COLOUR_NET_PLAYER29_DARK = 103,
	HUD_COLOUR_NET_PLAYER30_DARK = 104,
	HUD_COLOUR_NET_PLAYER31_DARK = 105,
	HUD_COLOUR_NET_PLAYER32_DARK = 106,
	HUD_COLOUR_BRONZE = 107,
	HUD_COLOUR_SILVER = 108,
	HUD_COLOUR_GOLD = 109,
	HUD_COLOUR_PLATINUM = 110,
	HUD_COLOUR_GANG1 = 111,
	HUD_COLOUR_GANG2 = 112,
	HUD_COLOUR_GANG3 = 113,
	HUD_COLOUR_GANG4 = 114,
	HUD_COLOUR_SAME_CREW = 115,
	HUD_COLOUR_FREEMODE = 116,
	HUD_COLOUR_PAUSE_BG = 117,
	HUD_COLOUR_FRIENDLY = 118,
	HUD_COLOUR_ENEMY = 119,
	HUD_COLOUR_LOCATION = 120,
	HUD_COLOUR_PICKUP = 121,
	HUD_COLOUR_PAUSE_SINGLEPLAYER = 122,
	HUD_COLOUR_FREEMODE_DARK = 123,
	HUD_COLOUR_INACTIVE_MISSION = 124,
	HUD_COLOUR_DAMAGE = 125,
	HUD_COLOUR_PINKLIGHT = 126,
	HUD_COLOUR_PM_MITEM_HIGHLIGHT = 127,
	HUD_COLOUR_SCRIPT_VARIABLE = 128,
	HUD_COLOUR_YOGA = 129,
	HUD_COLOUR_TENNIS = 130,
	HUD_COLOUR_GOLF = 131,
	HUD_COLOUR_SHOOTING_RANGE = 132,
	HUD_COLOUR_FLIGHT_SCHOOL = 133,
	HUD_COLOUR_NORTH_BLUE = 134,
	HUD_COLOUR_SOCIAL_CLUB = 135,
	HUD_COLOUR_PLATFORM_BLUE = 136,
	HUD_COLOUR_PLATFORM_GREEN = 137,
	HUD_COLOUR_PLATFORM_GREY = 138,
	HUD_COLOUR_FACEBOOK_BLUE = 139,
	HUD_COLOUR_INGAME_BG = 140,
	HUD_COLOUR_DARTS = 141,
	HUD_COLOUR_WAYPOINT = 142,
	HUD_COLOUR_MICHAEL = 143,
	HUD_COLOUR_FRANKLIN = 144,
	HUD_COLOUR_TREVOR = 145,
	HUD_COLOUR_GOLF_P1 = 146,
	HUD_COLOUR_GOLF_P2 = 147,
	HUD_COLOUR_GOLF_P3 = 148,
	HUD_COLOUR_GOLF_P4 = 149,
	HUD_COLOUR_WAYPOINTLIGHT = 150,
	HUD_COLOUR_WAYPOINTDARK = 151,
	HUD_COLOUR_PANEL_LIGHT = 152,
	HUD_COLOUR_MICHAEL_DARK = 153,
	HUD_COLOUR_FRANKLIN_DARK = 154,
	HUD_COLOUR_TREVOR_DARK = 155,
	HUD_COLOUR_OBJECTIVE_ROUTE = 156,
	HUD_COLOUR_PAUSEMAP_TINT = 157,
	HUD_COLOUR_PAUSE_DESELECT = 158,
	HUD_COLOUR_PM_WEAPONS_PURCHASABLE = 159,
	HUD_COLOUR_PM_WEAPONS_LOCKED = 160,
	HUD_COLOUR_END_SCREEN_BG = 161,
	HUD_COLOUR_CHOP = 162,
	HUD_COLOUR_PAUSEMAP_TINT_HALF = 163,
	HUD_COLOUR_NORTH_BLUE_OFFICIAL = 164,
	HUD_COLOUR_SCRIPT_VARIABLE_2 = 165,
	HUD_COLOUR_H = 166,
	HUD_COLOUR_HDARK = 167,
	HUD_COLOUR_T = 168,
	HUD_COLOUR_TDARK = 169,
	HUD_COLOUR_HSHARD = 170,
	HUD_COLOUR_CONTROLLER_MICHAEL = 171,
	HUD_COLOUR_CONTROLLER_FRANKLIN = 172,
	HUD_COLOUR_CONTROLLER_TREVOR = 173,
	HUD_COLOUR_CONTROLLER_CHOP = 174,
	HUD_COLOUR_VIDEO_EDITOR_VIDEO = 175,
	HUD_COLOUR_VIDEO_EDITOR_AUDIO = 176,
	HUD_COLOUR_VIDEO_EDITOR_TEXT = 177,
	HUD_COLOUR_HB_BLUE = 178,
	HUD_COLOUR_HB_YELLOW = 179,
};

class Data
{
public:
	char pad_0000[80]; //0x0000
	void* ContentListData; //0x0050
	uint16_t ContentListSize; //0x0058
	char pad_005A[6]; //0x005A
	void* BonusSectionData; //0x0060
	uint16_t BonusSectionSize; //0x0068
	char pad_006A[10]; //0x006A
	uint32_t PoolSize; //0x0074
}; //Size: 0x0078

class Tunable
{
public:
	char pad_0000[48]; //0x0000
	uint32_t Key; //0x0030
	char pad_0034[4]; //0x0034
	class Value* Value; //0x0038
	char pad_0040[32]; //0x0040
}; //Size: 0x0060

class Tunables
{

	uint8_t m_bonusSectionBytes[0x11F8] = {};
	uint16_t m_bonusSectionSize = 0;

public:
	char pad_0000[16]; //0x0000
	class Data* Data; //0x0010
	char pad_0018[24]; //0x0018
	void* TunableData; //0x0030
	uint16_t TotalSize; // 0x0038
	uint16_t TunablesSize; //0x003A

	Tunable* getTunable(const DWORD hash) const {
		if (this->TotalSize) {
			const auto offset = hash % this->TunablesSize * 8;

			for (auto i = *reinterpret_cast<unsigned __int64 *>(reinterpret_cast<unsigned __int64>(this->TunableData) + offset); ; i = *reinterpret_cast<unsigned __int64 *>(i + 0x28)) {
				if (!i)
					return nullptr;

				if (*reinterpret_cast<DWORD *>(i) == hash)
					return *reinterpret_cast<Tunable **>(i + 8);
			}
		}

		return nullptr;
	}

	template<typename T>
	void setTunable(const DWORD hash, const T value) {
		auto tunable = this->getTunable(hash);

		if (!tunable)
			return;

		tunable->Value = &value;
	}

	// THIS IS NOT READY FOR RELEASE. Using the QueueTransaction hook instead... bonus section needs more reversing
	void patchBonusSection() {
		// Store original values
		m_bonusSectionSize = this->Data->BonusSectionSize;
		memcpy(&m_bonusSectionBytes[0], this->Data->BonusSectionData, 0x11F8);

		// Patch it
		this->Data->BonusSectionSize = 0;
		memset(this->Data->BonusSectionData, 0, 0x11F8);
	}

	void restoreBonusSection() const {
		this->Data->BonusSectionSize = m_bonusSectionSize;
		memcpy(this->Data->BonusSectionData, m_bonusSectionBytes, 0x11F8);
	}

}; //Size: 0x003C

enum CrewIconId {
	CREW_ICON_ROCKSTAR = 17506743,
	CREW_ICON_KAPPA = 58800,
	CREW_ICON_DOGE = 8983550,
	CREW_ICON_TROLLFACE = 1232493,
	CREW_ICON_ANONYMOUS = 19365671,
	CREW_ICON_SPODERMAN = 5511527,
	CREW_ICON_SKULL = 7259919,
	CREW_ICON_UMAD = 18989208,
	CREW_ICON_ANIME_TIDDIES = 7523962,
	CREW_ICON_REDTUBE = 6207630,
	CREW_ICON_TRANSFORMERS = 29269474,
	CREW_ICON_JOKER = 185524,
	CREW_ICON_DEADPOOL = 1328145,
	CREW_ICON_ROLLINGBLUNT = 18822398,
	CREW_ICON_BLUNTMAN = 18470608,
	CREW_ICON_MICKY = 34186928,
	CREW_ICON_IFRUIT = 40030447,
	CREW_ICON_MONKEY = 15232130,
	CREW_ICON_RAZER = 23320514,
	CREW_ICON_BATMAN = 16821415,
	CREW_ICON_WEED = 36439940,
	CREW_ICON_PIKA = 24676577,
	CREW_ICON_NEGRO = 12823931,
	CREW_ICON_CLOWN = 512255,
	CREW_ICON_JESUS = 8375850
};